
java.until.Map:存储一对一对的数据（key--value）键值对   类似于y=f(x)
        -----HashMap(主要实现类)线程不安全的，效率高，可以添加null的key和value值，底层使用数组+单项链表+红黑树结构存储
            -----LinkedHashMap是HashMap的子类，在数组+单项链表+红黑树基础上增加双向链表
                                             记录元素添加的先后顺序，进而遍历时可以按照添加时的顺序
                                             在开发中如果需要频繁的遍历操作使用此类
        -----TreeMap:使用红黑树存储，按照添加的key--value中的key元素的大小顺序进行遍历，需要考虑自然排序定制排序
        -----Hashtable(古老实现类)线程安全的，效率低，不可以添加null的key和value值，底层使用数组+单项链表结构存储
            -----ProperTies:其key和value都是string类型的，常用来处理属性文件
  Map的常用方法:
     ---增
        put(Object key,Object value)
        putAll(Map map)
     ---删
        Object remove(Object key )
     ---改
        put(Object key,Object value)
        putAll(Map map)
     ---查
        Object get(Object key)
     ---长度
        size()
     ---遍历
        遍历key  Set keySet()
        遍历value  Collection values()
        遍历entry     Set entrySet()

  HashMap的底层实现:new HsahMap()
                  put(key,value)
  HashMap的元素特点:key通过set来存放，不允许重复，并且就有无序性，构成一个set集合，key所在类要重写HashCode和equals方法
                  value是可重复的，无序的，所有value构成一个collection集合，valuekey所在类要重写equals方法
                  HashMap中一个key--value构成一个entry
                  所有entry是不可重复的无序的，构成一个set集合
                  HashMap 是线程不安全的。允许添加 null 键和 null 值。
                  • 存储数据采用的哈希表结构，底层使用一维数组+单向链表+红黑树进行 key-value数据的存储。与 HashSet 一样，
                  元素的存取顺序不能保证一致。
                  • HashMap 判断两个 key 相等的标准是：两个 key 的 hashCode 值相等，通过
                  equals() 方法返回 true。
                  • HashMap 判断两个 value 相等的标准是：两个 value 通过 equals() 方法返回
                  true。

    -----LinkedHshMap:• LinkedHashMap 是 HashMap 的子类
               • 存储数据采用的哈希表结构+链表结构，在 HashMap 存储结构的基础上，使用了一对
                 双向链表来记录添加元素的先后顺序，可以保证遍历元素时，与添加的顺序一致。
               • 通过哈希表结构可以保证键的唯一、不重复，需要键所在类重写 hashCode()方法、
                 equals()方法。


  TreeMap:• TreeMap 存储 key-value 对时，需要根据 key-value 对进行排序。TreeMap 可以保
          证所有的 key-value 对处于有序状态。
          • TreeSet 底层使用红黑树结构存储数据
          • TreeMap 的 Key 的排序：
          – 自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所
          有的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException
          – 定制排序：创建 TreeMap 时，构造器传入一个 Comparator 对象，该对
          象负责对 TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key
          实现 Comparable 接口
          • TreeMap 判断两个 key 相等的标准：两个 key 通过 compareTo()方法或者 compare()
          方法返回 0。

  HashTable:• Hashtable 是 Map 接口的古老实现类，JDK1.0 就提供了。不同于 HashMap，
            Hashtable 是线程安全的。
            • Hashtable 实现原理和 HashMap 相同，功能相同。底层都使用哈希表结构（数组+单
            向链表），查询速度快。
            • 与 HashMap 一样，Hashtable 也不能保证其中 Key-Value 对的顺序
            • Hashtable 判断两个 key 相等、两个 value 相等的标准，与 HashMap 一致。
            • 与 HashMap 不同，Hashtable 不允许使用 null 作为 key 或 value。
    ----ProperTies:• Properties 类是 Hashtable 的子类，该对象用于处理属性文件
                   • 由于属性文件里的 key、value 都是字符串类型，所以 Properties 中要求 key 和
                   value 都是字符串类型
                   • 存取数据时，建议使用 setProperty(String key,String value)方法和 getProperty(String
                   key)方法

Collections 中提供了一系列静态的方法
对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法（均为static 方法）：
    排序操作：
        • reverse(List)：反转 List 中元素的顺序
        • shuffle(List)：对 List 集合元素进行随机排序
        • sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序
        • sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行
    排序
        • swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换
    查找
        • Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素
        • Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素
        • Object min(Collection)：根据元素的自然顺序，返回给定集合中的最小元素
        • Object min(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最小元素
        • int binarySearch(List list,T key)在 List 集合中查找某个元素的下标，但是 List 的元素必
        须是 T 或 T 的子类对象，而且必须是可比较大小的，即支持自然排序的。而且集合也事先必须是有序的，否则结果不确定。
        • int binarySearch(List list,T key,Comparator c)在 List 集合中查找某个元素的下标，但是
         List 的元素必须是 T 或 T 的子类对象，而且集合也事先必须是按照 c 比较器规则进行排序过的，否则结果不确定。
        • int frequency(Collection c，Object o)：返回指定集合中指定元素的出现次数
    复制、替换
        • void copy(List dest,List src)：将 src 中的内容复制到 dest 中
        • boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象 的所有旧值
        • 提供了多个 unmodifiableXxx()方法，该方法返回指定 Xxx 的不可修改的视图。添加
        • boolean addAll(Collection c,T... elements)将所有指定元素添加到指定 collection 中。同步
        • Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题