java.until.Collection:存储一个个数据
   ---子接口：Set:存储无需的，不可重复的
      ---HashSet:主要实现类
      底层使用的是HasMap，  即数组+链表+红黑树
               ---LinkedListHashSet  是HashMap的子类，
                 在数组+链表+红黑树的基础上又添加了一组双向链表用于记录添加元素的先后顺序，
                   即我们可以按照添加元素的顺序遍历数据，便于我们频繁的查询操作
               ---TreeSet 底层使用红黑树存储，按照添加元素的属性的指定的大小顺讯进行遍历


      存储无序的，不可重复的数据
      相较list，map使用较少
      可以用来过滤重复数据
   >无序性：不等于随机性,也不是指添加的顺序和遍历的顺序不一致
           什么是无序性？---->存放位置的无序性
           与添加元素的位置有关，与ArrayList依次紧密排列不同
           为了满足不可重复性，通过哈希算法得到哈希code值得到元素存储位置，如果哈希值相同则进行equals
           LinkedHashSet在存储的时候通过双向链表记录了存储的顺序故打印顺序与添加顺序是一致的
   >不可重复性：添加到set内的元素不能相同

   添加到 LinkedHashSet和HashSet中元素的要求：
   要求元素所在类重写equals和hashCode方法
   同时保持equals和hashCode结果的一致性

   TreeSet的使用
   --->底层是红黑树实现
   添加后的特点是按照元素指定的属性大小进行排序
   并且要求添加的元素必须是同一类型的数据，否则会报ClassCastExpection
   添加元素需要考虑自然排序（compareable）和定制排序（comparator）
   判断元素是否相同的标准:不再考虑hashcode和equals方法了，也意味着添加到TreeSet中元素的类不需要重写equals和hashCode方法
                      比较元素是否相等的标准就是自然排序和定制排序中CompareTo()和Compare()方法的返回值，如果为0则认为两个对象相等，
                      后一个元素无法存储




   


